---
title: "Data Visualisation"
author: "DCS"
format: 
  revealjs:
    chalkboard: TRUE
editor: visual
---

```{r setup, echo = FALSE}

library(extrafont) #additional fonts
#loadfonts(device="win")
library(tidyverse)
library(plotly)
library(ggsci) # color palletes for journals. Warning - this pallete drops NA's
library(gghalves) # half plots - useful for distributions
library(wesanderson) # Wes Anderson inspired color pallete. 
library(ggthemes) # Additional themes
#library(ThemePark) # Fun themes # run remotes::install_github("MatthewBJane/ThemePark") in console first to access
Whisky_data <- read_csv("Whisky_distillery_data.csv") %>% 
  mutate(Owner = as.factor(Owner),
         category = as.factor(category),
         Distillery = as.factor(Distillery),
         Location = as.factor(Location),
         Region = as.factor(Region),
         Founded = as.factor(Founded))
```

## Grammar of Graphics {#sec-grammar-of-graphics}

- A set of rules to facilitate data visualisation developed by [Leland Wilkinson](https://link.springer.com/book/10.1007/0-387-28695-0).
- It allows us to think of plot generation by following a step by step recipe (and like all good recipes, can be modified when needed).
- For a full overview, check out [Hadley Wickham's free textbook](https://ggplot2-book.org/layers#introduction) on using ggplot.
- For inspiration on more complex plots and advanced techniques, [Cedric Sherer's blog](https://www.cedricscherer.com/tags/ggplot2/) is full of great ideas!

## Grammar of Graphics

The recipe of a nice tasty plot includes:

1) The data
2) Aesthetic Mapping
3) Geometric Objects and Statistical transformations
4) Scaling and Faceting
5) Themes

## What does this mean? {#sec-what-does-this-mean}

-   [GGplot (grammar of graphics plot)](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098) has the grammar of graphics built into its structure.
-   This allows us to build plots in layers.
-   The plots start from the data, and build all the way up to the decorations.
-   This provides us with a lot of control to get the plots exactly as we want them.

# What does this mean? 

```{r fancyplot, echo = FALSE}
#| fig-width: 12
#| fig-height: 8
fancy_plot <-  Whisky_data %>% # assigning our code to "plot object"
  filter(category  == "Single Malt Scotch")%>% 
  count(Owner) %>%
  top_n(n = 3) %>% # set n
  left_join(Whisky_data) %>%
ggplot(
       aes(x = Region, y = review.point, fill = Region)) + 
  geom_half_boxplot(size = .5, width = .2)+
    geom_half_violin(side = "r") +
    stat_summary(fun.data = mean_se, color = "black", linewidth = 1, size = 1)+
    stat_summary(fun.data = mean_se, color = "white", linewidth = .7, size = .7)+
    facet_wrap(~Owner, 
             ncol = 1, 
             scales = "free_y", 
             strip.position = "bottom") +#
  coord_flip()+
  scale_fill_manual(
    values = wes_palette("IsleofDogs1", 
     type = "discrete")) + 
  theme_bw() + 
  theme(strip.background = 
          element_rect(fill="#8D8680",
          color = "#8D8680"),
        legend.position = "none",
        text= element_text( # command to control text
          size=12, #font size
          family="Palatino Linotype", #font style
          face = "bold") # choose bold/italics/default
        ) +
  labs(x = "",
       y = "Online Review Scores",
       title = "Whisky Review Scores by Region from the Top 3 largest Producers")
  
fancy_plot

```

## Building our Plot

-   Our first call is to use the function `ggplot()`
-   By itself, it looks like this:

```{r ggplot_function, echo = TRUE}
#| output-location: column-fragment
ggplot()
```

## Data layer

-   From there, we need to specify the data we need.
-   We can feed in the data as it is.
-   Or we can wrangle the data specifically for the visualisation.
-   However, at this stage our plot is still blank.

## Data Layer

```{r data_layer, echo = TRUE}
#| code-line-numbers: "2"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 6

# Regular data
ggplot(data = Whisky_data)


```

## Adding our coordinates

-   Our plots are empty as we've not told *R* what variables to use.
-   Thankfully, the command is very simple, using the `aes()` command after specifying the data.
-   Here we simply label our *x* and *y* coordinates.
-   But as we will see, we still don't have any visual ques in the plot itself.

## Adding our coordinates

```{r coordinates, echo = TRUE}
#| code-line-numbers: "3"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 6

# Standard version
ggplot(data = Whisky_data,
       aes(x = Region, y = review.point)) # setting x and y

```

## Graphic element of the plot

-   Here we link the **coordinates** from our **data** to visual geometries.
-   We use geoms (geometric functions) to decide how to shape the coordinates.
-   This allows us to shape our plot with our determined coordinates.
-   We can also apply statistical functions with the geoms.
-   We can place multiple geom layers.
-   The order of our layers is determined by the order we code.

## Graphic element of the plot {#sec-graphic-element-of-the-plot}

```{r geoms, echo = TRUE}
#| code-line-numbers: "4"
#| output-location: column-fragment
#| fig-width: 8
#| fig-height: 4

# First Layer
ggplot(data = Whisky_data,
       aes(x = Region, y = review.point)) + # setting x and y 
  geom_half_boxplot()
```

```{r geoms_2, echo = TRUE}
#| code-line-numbers: "5"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 6
# Second Layer
ggplot(data = Whisky_data,
       aes(x = Region, y = review.point))+
  geom_half_boxplot(size = .5, width = .2)+ # scaling size and width
  geom_half_violin(side = "r") #choosing right side for aesthetics


```

## Adding statistical layers

- Here we can model visualise any model we've used in our analyses.
- This is a vital step for communicating our research.
- It's also a fundamental step in validating our findings.
- R has so many options for visualising our models! From loess and linear models, to means and standard deviations. 


## Adding statistical layers

```{r geoms_3, echo = TRUE}
#| code-line-numbers: "6|8"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 6
# Second Layer
ggplot(data = Whisky_data,
       aes(x = Region, y = review.point))+
  geom_half_boxplot(size = .5, width = .2)+ # scaling size and width
  geom_half_violin(side = "r") + #choosing right side for aesthetics
    stat_summary(fun.data = mean_se,
                 color = "black", linewidth = 1.2, size = 1.2)+ # adjusting size
    stat_summary(fun.data = mean_se, 
                 color = "white", linewidth = .7, size = .7) # making smaller for a white centre

```

## Scaling our plots

-   This is closer, but we can see that our plots need some serious work.
-   We have an influential outlier that's causing havoc.
-   We can also account for other influential variables (like like owners).
-   We can focus our data for a clearer narrative.
-   We can also tweak the coordinates.

## Scaling our plots 

```{r scaled_geoms, echo = TRUE}
#| code-line-numbers: "2|3|4|5"
#| output-location: column-fragment
#| fig-width: 12
#| fig-height: 6

Whisky_data %>% # 
  filter(category  == "Single Malt Scotch") %>% #filter to include only single malt
  count(Owner) %>% # counting Owner
  top_n(n = 3) %>% # set n so we get top 3 Owners by count
  left_join(Whisky_data) %>% # joining back to data
ggplot(
       aes(x = Region, y = review.point))+
  geom_half_boxplot(size = .5, width = .2)+ 
  geom_half_violin(side = "r") +
  stat_summary(fun.data = mean_se, 
               color = "black", linewidth = 1.2, size = 1.2)+
  stat_summary(fun.data = mean_se,
               color = "white", linewidth = .7, size = .7)
  
```

## Scaling our plots

```{r scaled_geoms_2, echo = TRUE}
#| code-line-numbers: "8|15|16|17|18|19"
#| output-location: column-fragment
#| fig-width: 12
#| fig-height: 10

Whisky_data %>% # 
  filter(category  == "Single Malt Scotch") %>% 
  count(Owner) %>% 
  top_n(n = 3) %>% 
  left_join(Whisky_data) %>% 
ggplot(
       aes(x = Region, y = review.point, 
           fill = Region))+
  geom_half_boxplot(size = .5, width = .2)+ 
  geom_half_violin(side = "r") +
  stat_summary(fun.data = mean_se, 
    color = "black", linewidth = 1, size = 1)+
  stat_summary(fun.data = mean_se, 
    color = "white", linewidth = .6, size = .6) +
  facet_wrap(~Owner, # faceting by Owner
    ncol = 1, # number of columns 
    scales = "free_y", #changed to "free_y" to drop unused labels
    strip.position = "bottom") + #label position +
  coord_flip() # flipping chart on its side
```

## Setting themes and color schemes

-   Some journals will require certain stylistic designs for your figures.
-   This will include colour schemes, but also includes fonts and other design features.
-   Thankfully ggplot allows us to control these aspects of the plot with full customisation options as well. 
-   [Journal color schemes](https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html#Introduction)
-   [Theme options](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)
-   [Wes Anderson Color Scheme](https://github.com/karthik/wesanderson)

## Setting themes and color schemes  

### Decluttering our code
```{r taming_code, echo = TRUE}
#| code-line-numbers: "1|18"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 10
plot <- Whisky_data %>% 
  filter(category  == "Single Malt Scotch") %>% 
  count(Owner) %>% 
  top_n(n = 3) %>% 
  left_join(Whisky_data) %>% 
ggplot(
       aes(x = Region, y = review.point, fill = Region))+
  geom_half_boxplot(size = .5, width = .2)+ 
  geom_half_violin(side = "r") +
  stat_summary(fun.data = mean_se, 
      color = "black", linewidth = 1, size = 1)+
  stat_summary(fun.data = mean_se,
      color = "white", linewidth = .6, size = .6) +
  facet_wrap(~Owner, 
      ncol = 1, 
      scales = "free_y", 
      strip.position = "bottom") + 
  coord_flip()

plot
```

## Setting themes and color schemes

```{r themes_and_color_schemes, echo = TRUE}
#| code-line-numbers: "2|3|4|5|6|7|8|9"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 10

plot +
  scale_fill_manual(
    values = wes_palette("IsleofDogs1", #choosing color pallete
     type = "discrete")) + #setting to discrete variables
  theme_bw() + # from ggthemes
  theme(strip.background = # play with facet label
        element_rect(fill="#8D8680",# facet label fill
        color = "#8D8680"), #facet label border
        legend.position = "bottom" # change legend position
        ) 
```

## Setting themes and color schemes - font

```{r, font, echo = TRUE}
#initialising fonts - 
## Uncomment and copy + paste, and run this step in console
## Its too slow and intensive to run through quatro/markdown itself
# library(extrafont) # library for fonts tools
# font_import() #gain access to additional fonts
# loadfonts(device = "win") #load fonts into R
```

## Setting themes and color schemes: Font

```{r themes_and_color_schemes_font, echo = TRUE}
#| code-line-numbers: "9|10|11|12|13"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 10

better_plot <- plot +
  scale_fill_manual(
    values = wes_palette("IsleofDogs1", 
     type = "discrete")) + 
  theme_bw() + 
  theme(strip.background = 
        element_rect(fill="#8D8680",
        color = "#8D8680"),
        legend.position = "bottom",
        text= element_text( # command to control text
        size=16, #font size
        family="Comic Sans MS") #font style
        ) 

better_plot
```

## Setting themes and color schemes - font

```{r lFont_change, echo = TRUE}
#| code-line-numbers: "12|13"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 10

better_plot <- plot +
  scale_fill_manual(
    values = wes_palette("IsleofDogs1", 
    type = "discrete")) + 
  theme_bw() + 
  theme(strip.background = 
        element_rect(fill="#8D8680",
        color = "#8D8680"),
        legend.position = "none", # dropping legend, as label is clear
        text= element_text( # command to control text
        size=16, #font size
        family="Palatino Linotype", #font style
        face = "bold") # choose bold/italics/default
        ) 

better_plot
```

## Labelling our plot

- Our plot is now almost ready to go!
- We just need to customise our labels.
- This helps make our plots more informative

## Labelling our plot
```{r labelled_plot, echo = TRUE}
#| code-line-numbers: "3|4|5|6|7"
#| output-location: column-fragment
#| fig-width: 10
#| fig-height: 10

fancy_plot<- better_plot +
  labs(
       x = "",
       y = "Review Scores",
       title = "Whisky Review Scores by Region from the Top 3 largest Producers")

fancy_plot
```

## Labelling our plot
```{r}
#| fig-width: 12
#| fig-height: 10
fancy_plot
```

## Bonus - Interactive plot

- Using the `plotly` package, we can make our plots interactive when in html format.
- This can be very useful for presenting our data to a live audience.
- It can also be useful for teaching purposes - to help students understand what our coefficients mean visually.
- Note that some features of the plot maybe lost, as `plotly` uses a slightly different structure to ggplot.
- Otherwise, it is very easy to convert our plot with the `ggplotly()` function

## Bonus - Interactive plot

```{r interactive_plot, echo = TRUE}
#| output-location: column-fragment
#| fig-width: 12
#| fig-height: 8

p <-  Whisky_data %>% # assigning our code to "plot object"
  filter(category  == "Single Malt Scotch")%>% 
  count(Owner) %>%
  top_n(n = 3) %>% # set n
  left_join(Whisky_data) %>%
  ggplot(
      aes(x = Region, y = review.point, fill = Region))+
    geom_violin(side = "r", alpha = .7) +
    geom_boxplot(size = .5, width = .2)+ 
    stat_summary(fun.data = mean_se, 
        color = "black", linewidth = 1, size = 1)+
    stat_summary(fun.data = mean_se, 
        color = "white", linewidth = .6, size = .6) +
  facet_wrap(~Owner, 
        ncol = 1, 
        scales = "free_y", 
        strip.position = "bottom") + 
  coord_flip()

p
```

## Bonus - Interactive plot

```{r}
#| output-location: fragment
#| fig-width: 12
#| fig-height: 8
ggplotly(p)
```



